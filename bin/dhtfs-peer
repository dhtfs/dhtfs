#!/usr/bin/env python3

import argparse
import logging
import os
import random
from collections import namedtuple

import appdirs

from dhtfs.server import Server

# Defaults for missing command-line arguments
DEFAULT_HOST = '0.0.0.0'
DEFAULT_DHT_ALPHA = 2
DEFAULT_DHT_KSIZE = 5

OptionsDHT = namedtuple('OptionsDHT', [
    'host', 'port', 'alpha', 'ksize', 'node_id', 'bootstrap'
])
OptionsRPC = namedtuple('OptionsRPC', [
    'host', 'port', 'database'
])


def get_default_database_path(port):
    # This becomes some like /home/user/.cache/dhtfs/db-port
    return os.path.join(appdirs.user_cache_dir(), 'dhtfs', f'db-{port}')


def get_random_port():
    '''Pick a random port from a reasonable range.'''
    return random.randint(10000, 65000)


def parse_args():
    parser = argparse.ArgumentParser(
        description='Kademlia DHT peer for dhtfs.')

    group = parser.add_argument_group('General options')
    group.add_argument('-H', '--host', type=str,
                       help=f'Host to listen on (default: {DEFAULT_HOST})')
    group.add_argument('-p', '--port', type=int,
                       help='Port to listen on for DHT and RPC requests')
    group.add_argument('-v', '--verbose', action='count',
                       help='Enable verbose output (use up to twice)')
    group.set_defaults(host=DEFAULT_HOST)

    group = parser.add_argument_group('DHT options')
    group.add_argument('-a', '--alpha', type=int,
                       help=f'The Î± value of Kademlia (default: {DEFAULT_DHT_ALPHA})')
    group.add_argument('-b', '--bootstrap', type=str,
                       help='Comma-separated list of DHT bootstrap peers')
    group.add_argument('-i', '--node-id', type=str,
                       help='Node ID as a 20-byte hex number')
    group.add_argument('-k', '--ksize', type=int,
                       help=f'The K value of Kademlia (default: {DEFAULT_DHT_KSIZE})')
    group.set_defaults(alpha=DEFAULT_DHT_ALPHA, ksize=DEFAULT_DHT_KSIZE)

    group = parser.add_argument_group('RPC options')
    group.add_argument('-d', '--database', type=str,
                       help='Path for storing the database')

    return parser.parse_args()


def parse_node_id(node_id):
    if node_id is not None:
        return bytes.fromhex(node_id)


def run():
    args = parse_args()

    # Setup logging
    logformat = '[%(process)d] %(asctime)s: %(message)s'
    if args.verbose:
        if args.verbose > 1:
            loglevel = logging.DEBUG
        else:
            loglevel = logging.INFO
        logging.basicConfig(level=loglevel, format=logformat)
    else:
        logging.basicConfig(format=logformat)

    port = args.port or get_random_port()

    # Split up the service options
    options_dht = OptionsDHT(
        host=args.host,
        port=port,
        alpha=args.alpha,
        ksize=args.ksize, node_id=parse_node_id(args.node_id),
        bootstrap=args.bootstrap)
    logging.info(f'DHT port: {options_dht.port}/udp')

    options_rpc = OptionsRPC(
        host=args.host,
        port=port,
        database=args.database or get_default_database_path(port))
    logging.info(f'RPC port: {options_rpc.port}/tcp')

    Server(options_dht, options_rpc).start()


if __name__ == '__main__':
    run()
