#!/usr/bin/env python3

import argparse
import logging

from dhtfs.server import Server, OptionsDHT, OptionsRPC
from dhtfs.utils import *


def parse_args():
    parser = argparse.ArgumentParser(
        description='Kademlia DHT peer for dhtfs.')

    group = parser.add_argument_group('general options')
    group.add_argument('-H', '--host', type=str,
                       help=f'host to listen on (default: {defaults.host})')
    group.add_argument('-d', '--database', type=str,
                       help='path for storing the database')
    group.add_argument('--database-clean', action='store_true',
                       help='start with an empty database')
    group.add_argument('-p', '--port', type=int,
                       help='port to listen on for DHT and RPC requests')
    group.add_argument('-v', '--verbose', action='count',
                       help='enable verbose output (use up to twice)')
    group.set_defaults(host=defaults.host, port=get_random_port())

    group = parser.add_argument_group('DHT options')
    group.add_argument('-a', '--alpha', type=int,
                       help=f'the Î± value of Kademlia (default: {defaults.alpha})')
    group.add_argument('-b', '--bootstrap', type=str,
                       help='comma-separated list of DHT bootstrap peers')
    group.add_argument('-i', '--node-id', type=str,
                       help='node ID as a 20-byte hex number')
    group.add_argument('-k', '--ksize', type=int,
                       help=f'the K value of Kademlia (default: {defaults.ksize})')
    group.set_defaults(alpha=defaults.alpha, ksize=defaults.ksize)

    return parser.parse_args()


def run():
    args = parse_args()
    setup_logging(args.port, args.verbose)

    if args.node_id is not None:
        args.node_id = parse_node_id(args.node_id)
    database, node_id = setup_database(
        args.port,
        args.node_id,
        path=args.database, clean=args.database_clean)

    # Split up the service options
    options_dht = OptionsDHT(
        host=args.host,
        port=args.port,
        alpha=args.alpha,
        ksize=args.ksize,
        node_id=node_id,
        bootstrap=args.bootstrap)
    logging.info(f'DHT port: {options_dht.port}/udp')
    options_rpc = OptionsRPC(
        host=args.host,
        port=args.port,
        database=database,
        database_clean=args.database_clean)
    logging.info(f'RPC port: {options_rpc.port}/tcp')

    Server(options_dht, options_rpc).start()


if __name__ == '__main__':
    run()
