#!/usr/bin/env python3

import argparse
import datetime
import importlib
import logging
import os
import random
import shutil

from dateutil.parser import parse as dateutil_parse
from kademlia.utils import digest

from dhtfs.utils import *
from dhtfs.client import Client
from dhtfs.thrift.metadata.ttypes import FileSystem, Inode
from dhtfs.thrift.rpc.ttypes import Bucket


def parse_args():
    parser = argparse.ArgumentParser(
        description='Tool for creating, mounting and diagnostics of dhtfs.')

    group = parser.add_argument_group('general options')
    group.add_argument('-H', '--host', type=str,
                       help=f'DHT peer host (default: {defaults.host})')
    group.add_argument('-p', '--port', type=str,
                       help=f'DHT peer port (default: {defaults.port})')
    group.add_argument('-v', '--verbose', action='count',
                       help='enable verbose output (use up to twice)')
    group.set_defaults(host=defaults.host, port=defaults.port)

    commands = parser.add_subparsers(title='commands', dest='command')

    # Create command
    cparser = commands.add_parser('create')
    cparser.add_argument('name', type=str, nargs='?',
                         help=f'file system name (default: {defaults.name})')
    cparser.add_argument('-b', '--block-size', type=int,
                         help=f'block size in bytes (default: {defaults.block_size})')
    cparser.add_argument('-m', '--model', type=int,
                         help=f'model to use (0-2, default: {defaults.model})')
    cparser.add_argument('-r', '--root', type=int,
                         help='root inode number (default: random)')
    cparser.set_defaults(name=defaults.name,
                         block_size=defaults.block_size,
                         model=defaults.model)

    # Mount command
    cparser = commands.add_parser('mount')
    cparser.add_argument('mountpoint', type=str,
                         help='file system mounting point')
    cparser.add_argument('name', type=str, nargs='?',
                         help=f'file system name (default: {defaults.name})')
    cparser.add_argument('-a', '--at', type=dateutil_parse,
                         help='date and time of the file system snapshot')
    cparser.add_argument('-c', '--cache', type=str,
                         help='path to the caching storage')
    cparser.add_argument('-d', '--debug', action='store_true',
                         help='enable debugging in dhtfs-fuse')
    cparser.add_argument('-e', '--exec', type=str,
                         help='custom path to the dhtfs-fuse executable')
    cparser.add_argument('-f', '--foreground', action='store_true',
                         help='stay in foreground even without -d')
    cparser.add_argument('-s', '--snapshot-period', type=int,
                         help='interval in seconds for periodic snapshotting')
    cparser.set_defaults(name=defaults.name)

    # Umount command
    cparser = commands.add_parser('umount')
    cparser.add_argument('mountpoint', type=str,
                         help='file system mounting point')

    # DHT commands
    cparser = commands.add_parser('get-key')
    cparser.add_argument('key', type=str, help='DHT key string to lookup')
    cparser.add_argument('-t', '--type', type=str,
                         help='parse value as the given type (e.g. Bucket)')
    cparser.set_defaults(command='dht-get', get='key', hash=False)

    cparser = commands.add_parser('get-key-hash')
    cparser.add_argument('key', type=str, help='DHT key hash to lookup')
    cparser.add_argument('-t', '--type', type=str,
                         help='parse value as the given type (e.g. Bucket)')
    cparser.set_defaults(command='dht-get', get='key', hash=True)

    cparser = commands.add_parser('get-filesystem')
    cparser.add_argument('name', type=str, nargs='?',
                         help=f'file system name (default: {defaults.name})')
    cparser.set_defaults(name=defaults.name,
                         command='dht-get', get='filesystem')

    cparser = commands.add_parser('get-inode')
    cparser.add_argument('inumber', type=str, help='inode number')
    cparser.add_argument('name', type=str, nargs='?',
                         help=f'file system name (default: {defaults.name})')
    cparser.add_argument('-m', '--max-key', type=int,
                         help='upper bound on the latest timestamp (for -l)')
    cparser.set_defaults(name=defaults.name,
                         command='dht-get', get='inode')

    cparser = commands.add_parser('get-inode-indirect')
    cparser.add_argument('inumber', type=str, help='inode number')
    cparser.add_argument('name', type=str, nargs='?',
                         help=f'file system name (default: {defaults.name})')
    cparser.set_defaults(name=defaults.name,
                         command='dht-get', get='inode-indirect')

    cparser = commands.add_parser('get-inode-range')
    cparser.add_argument('inumber', type=str, help='inode number')
    cparser.add_argument('min', type=int, help='minimal timestamp')
    cparser.add_argument('max', type=int, help='maximal timestmap')
    cparser.add_argument('name', type=str, nargs='?',
                         help=f'file system name (default: {defaults.name})')
    cparser.set_defaults(name=defaults.name,
                         command='dht-get', get='inode-range')

    return parser.parse_args()


def create_client(host, port):
    client = Client(host, port)
    client.connect()
    return client


def get_filesystem(host, port, name):
    return create_client(host, port).get_filesystem(name)


def get_inode(host, port, inumber, fs_name, max_key=None):
    client = create_client(host, port)
    if max_key:
        return client.get_inode_latest(fs_name, inumber, max_key)
    else:
        return client.get_inode(fs_name, inumber)


def get_inode_indirect(host, port, inumber, fs_name):
    client = create_client(host, port)
    return client.get_inode_indirect(fs_name, inumber)


def get_inode_range(host, port, inumber, fs_name, min_key, max_key):
    return create_client(host, port).get_inode_range(fs_name, inumber, min_key, max_key)


def get_value_digest(host, port, kd):
    return create_client(host, port).get_iterative_digest(kd)


def mount(args):
    # Verify the executable
    if args.exec is not None:
        if not os.path.exists(args.exec) or not os.access(
                args.exec,
                os.F_OK | os.X_OK):
            print(f'{args.exec} is not an executable file')
            return
        executable = args.exec
    else:
        executable = shutil.which('dhtfs-fuse')
        if executable is None:
            print(f'Could not find dhtfs-fuse in PATH')
            return
    fuse_args = [
        os.path.basename(executable),
        '-o', f'host={args.host}',
        '-o', f'port={args.port}',
        '-o', f'name={args.name}',
    ]
    if args.foreground:
        fuse_args.append('-f')
    if args.at is not None:
        fuse_args.extend(['-o', f'snapshot={int(args.at.timestamp()) * 1000}'])
    if args.cache is not None:
        fuse_args.extend(['-o', f'cache={args.cache}'])
    if args.snapshot_period is not None:
        fuse_args.extend(['-o', f'snapshot_period={args.snapshot_period}'])
    env = os.environ.copy()
    if args.debug:
        fuse_args.append('-d')
        # Enable glib debugging
        env['G_MESSAGES_DEBUG'] = 'all'
    fuse_args.append(args.mountpoint)

    if args.at:
        print(f'Mounting "{args.name}" on {args.mountpoint} @ {args.at}')
    else:
        print(f'Mounting "{args.name}" on {args.mountpoint}')
    os.execve(executable, fuse_args, env)


def umount(mountpoint):
    # Nothing too fancy here
    os.system(f'fusermount -u {mountpoint}')


def run():
    args = parse_args()
    setup_logging(args.verbose)

    if args.command == 'create':
        # Pick a random root inode number
        if args.root is not None:
            inumber = args.root
        else:
            inumber = random.getrandbits(63)
        if args.model < 0 or args.model > 2:
            print('Model must be an integer 0, 1 or 2')
            return
        client = create_client(args.host, args.port)
        client.put_filesystem(args.name, args.model, args.block_size, inumber)
        print(f'Created file system "{args.name}"')
    elif args.command == 'mount':
        mount(args)
    elif args.command == 'umount':
        umount(args.mountpoint)
    elif args.command == 'dht-get':
        if args.get == 'filesystem':
            value = get_filesystem(args.host, args.port, args.name)
        elif args.get == 'inode':
            value = get_inode(args.host, args.port, args.inumber, args.name,
                              args.max_key)
        elif args.get == 'inode-indirect':
            value = get_inode_indirect(args.host, args.port, args.inumber, args.name)
        elif args.get == 'inode-range':
            value = get_inode_range(args.host, args.port, args.inumber, args.name,
                                    args.min, args.max)
        else:
            if args.hash:
                kd = bytes.fromhex(args.key)
            else:
                kd = digest(args.key)
                logging.info(f'DHT key: {args.key} -> {kd.hex()}')

            value = get_value_digest(args.host, args.port, kd)
            if args.type:
                obj = None
                for package in ('dhtfs.thrift.metadata', 'dhtfs.thrift.rpc'):
                    ttypes = importlib.import_module(f'{package}.ttypes')
                    if hasattr(ttypes, args.type):
                        obj = getattr(ttypes, args.type)()
                        break
                if obj is None:
                    raise Exception(f'Invalid type: {args.type}')
                try:
                    parsed_value = thrift_unserialize(value, obj)
                    value = parsed_value
                except:
                    print(f'Failed to parse value as {args.type}')

        if value is not None:
            print(value)
        else:
            print('Value not found')
    else:
        import sys
        print(f'No command given. Try {sys.argv[0]} -h')


if __name__ == '__main__':
    run()
