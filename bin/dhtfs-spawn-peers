#!/usr/bin/env python3

import argparse
import asyncio
import copy
import logging
import math
import multiprocessing
import signal

from dhtfs.peer.server import Server, OptionsDHT, OptionsRPC
from dhtfs.peer.utils import *
from dhtfs.utils import setup_logging

children = []


def parse_args():
    parser = argparse.ArgumentParser(
        description='Spawn a number of Kademlia DHT peers.')

    parser.add_argument('peers', type=int, help='number of peers to spawn')

    group = parser.add_argument_group('general options')
    group.add_argument('-t', '--database-type', type=str,
                       choices=('redis', 'leveldb'),
                       help=f'database type (default: {defaults.db_type})')
    group.add_argument('--database-clean', action='store_true',
                       help='start with an empty database')
    group.add_argument('-H', '--host', type=str,
                       help=f'host to listen on (default: {defaults.host})')
    group.add_argument('-p', '--port', type=int,
                       help=f'first port to listen on (default: {defaults.port})')
    group.add_argument('-v', '--verbose', action='count',
                       help='enable verbose output (use up to twice)')
    group.set_defaults(host=defaults.host, port=defaults.port,
                       database_type=defaults.db_type)

    group = parser.add_argument_group('DHT options')
    group.add_argument('-a', '--alpha', type=int,
                       help=f'the Î± value of Kademlia (default: {defaults.alpha})')
    group.add_argument('-b', '--bootstrap', type=str,
                       help='comma-separated list of DHT bootstrap peers')
    group.add_argument('-i', '--node-id', type=str, nargs='*',
                       help='node IDs as 20-byte hex numbers')
    group.add_argument('-k', '--ksize', type=int,
                       help=f'the K value of Kademlia (default: auto)')
    group.set_defaults(alpha=defaults.alpha)

    return parser.parse_args()


def run():
    args = parse_args()
    setup_logging(args.verbose)

    if args.bootstrap is not None:
        args.bootstrap = ','.split(args.bootstrap)
    if args.ksize is None:
        args.ksize = max(1, int(math.log2(args.peers)))

    for i in range(args.peers):
        peer_args = copy.copy(args)
        peer_args.port = args.port + i
        try:
            node_id = parse_node_id(args.node_id[i])
        except (IndexError, TypeError):
            # Not enough node IDs given, pick a random one
            node_id = None
        if args.database_type == 'redis':
            database = f'redis://localhost/{i}'
        else:
            database = None

        peer_args.database, peer_args.node_id = setup_database(
            port=peer_args.port,
            node_id=node_id,
            db_type=args.database_type,
            db_conn=database,
            db_clean=args.database_clean)

        if peer_args.bootstrap is None:
            peer_args.bootstrap = [f'{args.host}:{port}' for port in range(
                args.port,
                args.port + i)]

        process = multiprocessing.Process(target=run_peer, args=(peer_args,))
        process.start()
        children.append(process)

    loop = asyncio.get_event_loop()
    # Call our stop() function when killed by a signal
    for signame in ('SIGINT', 'SIGTERM'):
        loop.add_signal_handler(getattr(signal, signame), stop)

    loop.run_forever()


def run_peer(args):
    # Split up the service options
    options_dht = OptionsDHT(
        host=args.host,
        port=args.port,
        alpha=args.alpha,
        ksize=args.ksize, node_id=args.node_id,
        bootstrap=args.bootstrap)
    options_rpc = OptionsRPC(
        host=args.host,
        port=args.port,
        database=args.database)

    print(f'Starting peer on {args.host}:{args.port}')

    Server(options_dht, options_rpc).start()


def stop():
    for child in children:
        logging.debug(f'Terminating child {child.pid}')
        child.terminate()
        child.join()
    asyncio.get_event_loop().stop()


if __name__ == '__main__':
    run()
